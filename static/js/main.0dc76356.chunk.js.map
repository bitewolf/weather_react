{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","city","className","country","pressure","temp","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","sys","date","Date","setTime","getHours","getMinutes","getSeconds","timeSunrise","Intl","DateTimeFormat","hour","minute","second","format","timeSunset","main","pressureInMmHg","Math","floor","setState","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc76356.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погодное приложение</h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n    </div>\r\n);\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n<div>\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Получить инфу о погоде</button>\r\n    </form>\r\n</div>\r\n)\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n        <div>\r\n        { props.city && \r\n        <div className=\"infoWeather\">\r\n            <p>Местоположение: {props.city},{props.country}</p>\r\n            <p>Давление: {props.pressure}</p>\r\n            <p>Температура сейчас: {props.temp} (хуя печёт)</p>\r\n            <p>Восход солнца: {props.sunrise}</p>\r\n            <p>Закат солнца: {props.sunset}</p>\r\n        </div>\r\n        }\r\n        <p className=\"error\">{props.error}</p>\r\n        \r\n    </div>\r\n    );\r\n\r\n\r\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = \"a67beca4caf74f3b11c47d014661d391\";\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error:  undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    let city = e.target.elements.city.value;\n    \n\n    if(city) {\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n      console.log(data);\n\n      let sunset = data.sys.sunset;\n      let date = new Date();\n      date.setTime(sunset);\n      let sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n\n      \n      let timeSunrise = new Intl.DateTimeFormat('ru-RU', {hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(data.sys.sunrise*1000);\n      let timeSunset = new Intl.DateTimeFormat('ru-RU', {hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(data.sys.sunset*1000);\n\n      let pressure = data.main.pressure;\n      let pressureInMmHg = Math.floor(pressure * 0.75006);\n\n\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: pressureInMmHg,\n        sunrise: timeSunrise,\n        sunset: timeSunset,\n        error: undefined\n\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunrise: undefined,\n        sunset: undefined,\n        error: \"Введите название города\"\n\n      });\n    }\n  };\n\n  render () {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col-sm-5 info\">\n                    <Info />\n                  </div>\n                  <div className=\"col-sm-7 form\">\n                    <Form weatherMethod={this.gettingWeather} />\n                    <Weather \n                    temp={this.state.temp}\n                    city={this.state.city}\n                    country={this.state.country}\n                    pressure={this.state.pressure}\n                    sunrise={this.state.sunrise}\n                    sunset={this.state.sunset}\n                    error={this.state.error}\n                    />\n                  </div>\n                </div>\n              </div>\n        \n        </div>\n        \n        \n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}