{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","props","className","time","temp","tempFeels","Form","onSubmit","weatherMethod","type","name","placeholder","Weather","city","country","pressure","sunrise","sunset","error","API_KEY","App","state","undefined","weather","hour","timezone","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","console","log","description","Math","floor","main","feels_like","pressureInMmHg","weatherWithoutSpace","replace","trim","newLocal","Date","hourNow","timeLocal","getHours","getTimezoneOffset","getDate","toLocaleString","month","getMinutes","timeSunrise","Intl","DateTimeFormat","minute","second","format","sys","timeSunset","setState","timeg","classWeather","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5525d7d8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = props => (\r\n    <div className=\"infoText\"> \r\n        <p className=\"time\">{props.time}</p>\r\n        <p className=\"temp\">{props.temp} °C</p>\r\n        <p className=\"tempFeels\">Ощущается как: {props.tempFeels} °C</p>\r\n    </div>\r\n);\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n<div>\r\n    <form onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n        <button>Получить инфу о погоде</button>\r\n    </form>\r\n</div>\r\n)\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n        <div>\r\n        { props.city && \r\n        <div className=\"infoWeather\">\r\n            <p>Местоположение: {props.city},{props.country}</p>\r\n            <p>Давление: {props.pressure}</p>\r\n            <p>Восход солнца: {props.sunrise}</p>\r\n            <p>Закат солнца: {props.sunset}</p>\r\n        </div>\r\n        }\r\n        <p className=\"error\">{props.error}</p>\r\n        \r\n    </div>\r\n    );\r\n\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst API_KEY = \"a67beca4caf74f3b11c47d014661d391\";\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    temp: undefined,\r\n    tempFeels: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    pressure: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    error:  undefined,\r\n    weather: undefined,\r\n    hour: undefined,\r\n    time: undefined,\r\n    timezone: undefined\r\n  }\r\n\r\n  gettingWeather = async (e) => {\r\n    e.preventDefault();\r\n    let city = e.target.elements.city.value;\r\n    \r\n    if(city) {\r\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}&units=metric`);\r\n      const data = await api_url.json();\r\n      console.log(data);\r\n      console.log(data.weather[0].description);\r\n           \r\n      let temp = Math.floor(data.main.temp*10) / 10;\r\n      let tempFeels = Math.floor(data.main.feels_like*10) / 10;\r\n\r\n      let pressure = data.main.pressure;\r\n      let pressureInMmHg = Math.floor(pressure * 0.75006);\r\n\r\n      let weatherWithoutSpace = data.weather[0].description;\r\n      weatherWithoutSpace = weatherWithoutSpace.replace(/ +/g, '').trim();\r\n      console.log(weatherWithoutSpace);\r\n\r\n      const newLocal = new Date();\r\n      let timeLocal = newLocal;\r\n      \r\n      let hourNow = timeLocal.getHours() + timeLocal.getTimezoneOffset()/60 + data.timezone/3600;\r\n      let time = timeLocal.getDate() +\" \"+ timeLocal.toLocaleString('ru-RU', { month: 'short' }) +\" \"+timeLocal.getHours() +\":\"+ timeLocal.getMinutes();\r\n      \r\n      let timeSunrise = new Intl.DateTimeFormat('ru-RU', {hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(data.sys.sunrise*1000 + timeLocal.getTimezoneOffset()*60000 + data.timezone*1000);\r\n      let timeSunset = new Intl.DateTimeFormat('ru-RU', {hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(data.sys.sunset*1000 + timeLocal.getTimezoneOffset()*60000 + data.timezone*1000);\r\n      \r\n      this.setState({\r\n        timeLocal: timeLocal,\r\n        temp: temp,\r\n        tempFeels: tempFeels,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        pressure: pressureInMmHg,\r\n        sunrise: timeSunrise,\r\n        sunset: timeSunset,\r\n        error: undefined,\r\n        weather: weatherWithoutSpace,\r\n        hour: hourNow,\r\n        time: time\r\n      });\r\n    } else {\r\n      this.setState({\r\n        timeLocal: undefined,\r\n        temp: undefined,\r\n        tempFeels: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        weather: undefined,\r\n        error: \"Введите название города\",\r\n        hour: undefined,\r\n        timeg: undefined\r\n      });\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  render () {\r\n    let classWeather = 'info';\r\n    \r\n    if (this.state.weather)\r\n    {\r\n    classWeather += ' '+this.state.weather;\r\n    };\r\n    if (this.state.hour) {\r\n      let hour = this.state.hour;\r\n      if (hour < 0) {\r\n        hour += 24;\r\n      }\r\n       if (hour > 23 || hour < 6)\r\n      {\r\n        classWeather += ' night';\r\n      } else {\r\n          classWeather += ' day';\r\n      }\r\n    }\r\n   \r\n\r\n    return (\r\n      <div className=\"wrapperOff\">\r\n        <div className=\"mainOff\">\r\n              <div className=\"containerOff\">\r\n                <div className=\"window\">\r\n                  <div className={classWeather}>\r\n                    <Info\r\n                    time={this.state.time}\r\n                    tempFeels={this.state.tempFeels}\r\n                    temp={this.state.temp}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form\">\r\n                    <Form weatherMethod={this.gettingWeather} />\r\n                    <Weather \r\n                    temp={this.state.temp}\r\n                    city={this.state.city}\r\n                    country={this.state.country}\r\n                    pressure={this.state.pressure}\r\n                    sunrise={this.state.sunrise}\r\n                    sunset={this.state.sunset}\r\n                    error={this.state.error}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        \r\n        </div>\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}